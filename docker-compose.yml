version: "3.8"

volumes:
  rabbitmq_data:
    name: esd_rabbitmq_data

networks:
  esd-net:
    driver: bridge

services:
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit-1
    restart: always
    ports:
      - "5672:5672"  # AMQP protocol
      - "15672:15672"  # RabbitMQ Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - esd-net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  cart:
    build:
      context: ./server
      dockerfile: ./cart/cart.Dockerfile
    image: mitchshona/cart:latest
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5201:5201"
    networks:
      - esd-net
    depends_on:
      rabbitmq:
        condition: service_healthy  

  cart_product:
    build:
      context: ./server
      dockerfile: ./cart_product/cart_product.Dockerfile
    image: mitchshona/cart_product:latest
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    ports:
      - "5300:5300"
    networks:
      - esd-net

  payment:
    build:
      context: ./server
      dockerfile: ./payment/payment.Dockerfile
    image: mitchshona/payment:latest
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
    env_file:
      - ./server/.env
    ports:
      - "5202:5202"
    networks:
      - esd-net
    depends_on:
      rabbitmq:
        condition: service_healthy 

  place_order:
    build:
      context: ./server
      dockerfile: ./place_order/place_order.Dockerfile
    image: mitchshona/place_order:latest
    restart: always
    environment:
      PYTHONUNBUFFERED: 1
      CART_SERVICE_URL: http://cart:5201/cart
      PAYMENT_SERVICE_URL: http://payment:5202/payment
      CART_PRODUCT_SERVICE_URL: http://cart_product:5300/cart-product
    ports:
      - "5301:5301"
    networks:
      - esd-net
    depends_on:
      rabbitmq:
        condition: service_healthy
