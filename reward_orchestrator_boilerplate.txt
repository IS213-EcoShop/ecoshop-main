<<<<<<< HEAD
# Project Structure and Boilerplate Generation Plan


/services
  /wallet
    - app.py
    - utils.py
    - requirements.txt
    - Dockerfile
    - .env.example

  /mission
    - app.py
    - utils.py
    - requirements.txt
    - Dockerfile
    - .env.example

  /leaderboard
    - app.py
    - utils.py
    - requirements.txt
    - Dockerfile
    - .env.example

  /reward_orchestrator
    - app.py
    - events.py (RabbitMQ consumer + dispatch logic)
    - requirements.txt
    - Dockerfile
    - .env.example

/docker-compose.yml (extended)
  - Includes all services + RabbitMQ + management UI (e.g. RabbitMQ Management Plugin)

---

All services will:
- Use supabase 
- Communicate through RabbitMQ where applicable
=======
# Project Structure and Boilerplate Generation Plan


/services
  /wallet
    - app.py
    - utils.py
    - requirements.txt
    - Dockerfile
    - .env.example

  /mission
    - app.py
    - utils.py
    - requirements.txt
    - Dockerfile
    - .env.example

  /leaderboard
    - app.py
    - utils.py
    - requirements.txt
    - Dockerfile
    - .env.example

  /reward_orchestrator
    - app.py
    - events.py (RabbitMQ consumer + dispatch logic)
    - requirements.txt
    - Dockerfile
    - .env.example

/docker-compose.yml (extended)
  - Includes all services + RabbitMQ + management UI (e.g. RabbitMQ Management Plugin)

---

All services will:
- Use supabase 
- Communicate through RabbitMQ where applicable
>>>>>>> 8af7e36448cfdd8fcb363626917d552e7b87bc59
